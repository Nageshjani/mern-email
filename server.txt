{server.js
                require('dotenv').config()
            const express = require('express')
            const mongoose = require('mongoose')
            const cors = require('cors')
            const cookieParser = require('cookie-parser')
            const fileUpload = require('express-fileupload')
            const path = require('path')


            const app = express()
            app.use(express.json())
            app.use(cors())
            app.use(cookieParser())
            app.use(fileUpload({
                useTempFiles: true
            }))

            // Routes
            app.use('/user', require('./routes/userRouter'))
            app.use('/api', require('./routes/upload'))


            // Connect to mongodb
            const URI = process.env.MONGODB_URL
            mongoose.connect(URI, {
                useCreateIndex: true,
                useFindAndModify: false,
                useNewUrlParser: true,
                useUnifiedTopology: true
            }, err => {
                if(err) throw err;
                console.log("Connected to mongodb")
            })

            if(process.env.NODE_ENV === 'production'){
                app.use(express.static('client/build'))
                app.get('*', (req, res)=>{
                    res.sendFile(path.join(__dirname, 'client', 'build', 'index.html'))
                })
            }



            const PORT = process.env.PORT || 5000
            app.listen(PORT, () => {
                console.log('Server is running on port', PORT)
            })
}



{env
                MONGODB_URL = YOUR_MONGODB_URL

            CLIENT_URL = http://localhost:3000

            ACCESS_TOKEN_SECRET = YOUR_ACCESS_TOKEN_SECRET
            REFRESH_TOKEN_SECRET = YOUR_REFRESH_TOKEN_SECRET
            ACTIVATION_TOKEN_SECRET = YOUR_ACTIVATION_TOKEN_SECRET

            MAILING_SERVICE_CLIENT_ID = YOUR_MAILING_SERVICE_CLIENT_ID
            MAILING_SERVICE_CLIENT_SECRET = YOUR_MAILING_SERVICE_CLIENT_SECRET
            MAILING_SERVICE_REFRESH_TOKEN = YOUR_MAILING_SERVICE_REFRESH_TOKEN
            SENDER_EMAIL_ADDRESS = YOUR_SENDER_EMAIL_ADDRESS


            CLOUD_NAME = YOUR_CLOUD_NAME
            CLOUD_API_KEY = YOUR_CLOUD_API_KEY
            CLOUD_API_SECRET = YOUR_CLOUD_API_SECRET


            GOOGLE_SECRET = YOUR_GOOGLE_SECRET
            FACEBOOK_SECRET = YOUR_FACEBOOK_SECRET
}

{userRouter
            const router = require('express').Router()
        const userCtrl = require('../controllers/userCtrl')
        const auth = require('../middleware/auth')
        const authAdmin = require('../middleware/authAdmin')
        
        router.post('/register', userCtrl.register)
        router.post('/activation', userCtrl.activateEmail)
        router.post('/login', userCtrl.login)
        router.post('/refresh_token', userCtrl.getAccessToken)
        router.post('/forgot', userCtrl.forgotPassword)
        router.post('/reset', auth, userCtrl.resetPassword)
        router.get('/infor', auth, userCtrl.getUserInfor)
        router.get('/logout', userCtrl.logout)
        router.patch('/update', auth, userCtrl.updateUser)

        router.patch('/update_role/:id', auth, authAdmin, userCtrl.updateUsersRole)
        router.delete('/delete/:id', auth, authAdmin, userCtrl.deleteUser)
        router.get('/all_infor', auth, authAdmin, userCtrl.getUsersAllInfor)



        // Social Login
        router.post('/google_login', userCtrl.googleLogin)

        router.post('/facebook_login', userCtrl.facebookLogin)


        module.exports = router
}

{upload
            const router = require('express').Router()
            const uploadImage = require('../middleware/uploadImage')
            const uploadCtrl = require('../controllers/uploadCtrl')
            const auth = require('../middleware/auth')

            router.post('/upload_avatar', uploadImage, auth, uploadCtrl.uploadAvatar)

            module.exports = router

}

{model
            const mongoose = require('mongoose')


        const userSchema = new mongoose.Schema({
            name: {
                type: String,
                required: [true, "Please enter your name!"],
                trim: true
            },
            email: {
                type: String,
                required: [true, "Please enter your email!"],
                trim: true,
                unique: true
            },
            password: {
                type: String,
                required: [true, "Please enter your password!"]
            },
            role: {
                type: Number,
                default: 0 // 0 = user, 1 = admin
            },
            avatar: {
                type: String,
                default: "https://res.cloudinary.com/devatchannel/image/upload/v1602752402/avatar/avatar_cugq40.png"
            }
        }, {
            timestamps: true
        })

        module.exports = mongoose.model("Users", userSchema)
}

{auth 
        const jwt = require('jsonwebtoken')


        const auth = (req, res, next) => {
            try {
                const token = req.header("Authorization")
                if(!token) return res.status(400).json({msg: "Invalid Authentication."})

                jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {
                    if(err) return res.status(400).json({msg: "Invalid Authentication."})

                    req.user = user
                    next()
                })
            } catch (err) {
                return res.status(500).json({msg: err.message})
            }
        }

        module.exports = auth

}
{authAdmin
        const Users = require('../models/userModel')

        const authAdmin = async (req, res, next) => {
            try {
                const user = await Users.findOne({_id: req.user.id})

                if(user.role !== 1) 
                    return res.status(500).json({msg: "Admin resources access denied."})

                next()
            } catch (err) {
                return res.status(500).json({msg: err.message})
            }
        }

        module.exports = authAdmin

}

{uploadImage
        const fs = require('fs');

        module.exports = async function(req, res, next) {
            try {
                if(!req.files || Object.keys(req.files).length === 0)
                    return res.status(400).json({msg: "No files were uploaded."})
                    
                const file = req.files.file;

                if(file.size > 1024 * 1024){
                    removeTmp(file.tempFilePath)
                    return res.status(400).json({msg: "Size too large."})
                } // 1mb

                if(file.mimetype !== 'image/jpeg' && file.mimetype !== 'image/png'){
                    removeTmp(file.tempFilePath)
                    return res.status(400).json({msg: "File format is incorrect."})
                }

                next()
            } catch (err) {
                return res.status(500).json({msg: err.message})
            }
        }

        const removeTmp = (path) => {
            fs.unlink(path, err => {
                if(err) throw err
            })
        }

}




{userController
            const Users = require('../models/userModel')
            const bcrypt = require('bcrypt')
            const jwt = require('jsonwebtoken')
            const sendMail = require('./sendMail')

            const {google} = require('googleapis')
            const {OAuth2} = google.auth
            const fetch = require('node-fetch')

            const client = new OAuth2(process.env.MAILING_SERVICE_CLIENT_ID)

            const {CLIENT_URL} = process.env

            const userCtrl = {
                register: async (req, res) => {
                    try {
                        const {name, email, password} = req.body
                        
                        if(!name || !email || !password)
                            return res.status(400).json({msg: "Please fill in all fields."})

                        if(!validateEmail(email))
                            return res.status(400).json({msg: "Invalid emails."})

                        const user = await Users.findOne({email})
                        if(user) return res.status(400).json({msg: "This email already exists."})

                        if(password.length < 6)
                            return res.status(400).json({msg: "Password must be at least 6 characters."})

                        const passwordHash = await bcrypt.hash(password, 12)

                        const newUser = {
                            name, email, password: passwordHash
                        }

                        const activation_token = createActivationToken(newUser)

                        const url = `${CLIENT_URL}/user/activate/${activation_token}`
                        sendMail(email, url, "Verify your email address")


                        res.json({msg: "Register Success! Please activate your email to start."})
                    } catch (err) {
                        return res.status(500).json({msg: err.message})
                    }
                },
                activateEmail: async (req, res) => {
                    try {
                        const {activation_token} = req.body
                        const user = jwt.verify(activation_token, process.env.ACTIVATION_TOKEN_SECRET)

                        const {name, email, password} = user

                        const check = await Users.findOne({email})
                        if(check) return res.status(400).json({msg:"This email already exists."})

                        const newUser = new Users({
                            name, email, password
                        })

                        await newUser.save()

                        res.json({msg: "Account has been activated!"})

                    } catch (err) {
                        return res.status(500).json({msg: err.message})
                    }
                },
                login: async (req, res) => {
                    try {
                        const {email, password} = req.body
                        const user = await Users.findOne({email})
                        if(!user) return res.status(400).json({msg: "This email does not exist."})

                        const isMatch = await bcrypt.compare(password, user.password)
                        if(!isMatch) return res.status(400).json({msg: "Password is incorrect."})

                        const refresh_token = createRefreshToken({id: user._id})
                        res.cookie('refreshtoken', refresh_token, {
                            httpOnly: true,
                            path: '/user/refresh_token',
                            maxAge: 7*24*60*60*1000 // 7 days
                        })

                        res.json({msg: "Login success!"})
                    } catch (err) {
                        return res.status(500).json({msg: err.message})
                    }
                },
                getAccessToken: (req, res) => {
                    try {
                        const rf_token = req.cookies.refreshtoken
                        if(!rf_token) return res.status(400).json({msg: "Please login now!"})

                        jwt.verify(rf_token, process.env.REFRESH_TOKEN_SECRET, (err, user) => {
                            if(err) return res.status(400).json({msg: "Please login now!"})

                            const access_token = createAccessToken({id: user.id})
                            res.json({access_token})
                        })
                    } catch (err) {
                        return res.status(500).json({msg: err.message})
                    }
                },
                forgotPassword: async (req, res) => {
                    try {
                        const {email} = req.body
                        const user = await Users.findOne({email})
                        if(!user) return res.status(400).json({msg: "This email does not exist."})

                        const access_token = createAccessToken({id: user._id})
                        const url = `${CLIENT_URL}/user/reset/${access_token}`

                        sendMail(email, url, "Reset your password")
                        res.json({msg: "Re-send the password, please check your email."})
                    } catch (err) {
                        return res.status(500).json({msg: err.message})
                    }
                },
                resetPassword: async (req, res) => {
                    try {
                        const {password} = req.body
                        console.log(password)
                        const passwordHash = await bcrypt.hash(password, 12)

                        await Users.findOneAndUpdate({_id: req.user.id}, {
                            password: passwordHash
                        })

                        res.json({msg: "Password successfully changed!"})
                    } catch (err) {
                        return res.status(500).json({msg: err.message})
                    }
                },
                getUserInfor: async (req, res) => {
                    try {
                        const user = await Users.findById(req.user.id).select('-password')

                        res.json(user)
                    } catch (err) {
                        return res.status(500).json({msg: err.message})
                    }
                },
                getUsersAllInfor: async (req, res) => {
                    try {
                        const users = await Users.find().select('-password')

                        res.json(users)
                    } catch (err) {
                        return res.status(500).json({msg: err.message})
                    }
                },
                logout: async (req, res) => {
                    try {
                        res.clearCookie('refreshtoken', {path: '/user/refresh_token'})
                        return res.json({msg: "Logged out."})
                    } catch (err) {
                        return res.status(500).json({msg: err.message})
                    }
                },
                updateUser: async (req, res) => {
                    try {
                        const {name, avatar} = req.body
                        await Users.findOneAndUpdate({_id: req.user.id}, {
                            name, avatar
                        })

                        res.json({msg: "Update Success!"})
                    } catch (err) {
                        return res.status(500).json({msg: err.message})
                    }
                },
                updateUsersRole: async (req, res) => {
                    try {
                        const {role} = req.body

                        await Users.findOneAndUpdate({_id: req.params.id}, {
                            role
                        })

                        res.json({msg: "Update Success!"})
                    } catch (err) {
                        return res.status(500).json({msg: err.message})
                    }
                },
                deleteUser: async (req, res) => {
                    try {
                        await Users.findByIdAndDelete(req.params.id)

                        res.json({msg: "Deleted Success!"})
                    } catch (err) {
                        return res.status(500).json({msg: err.message})
                    }
                },
                googleLogin: async (req, res) => {
                    try {
                        const {tokenId} = req.body

                        const verify = await client.verifyIdToken({idToken: tokenId, audience: process.env.MAILING_SERVICE_CLIENT_ID})
                        
                        const {email_verified, email, name, picture} = verify.payload

                        const password = email + process.env.GOOGLE_SECRET

                        const passwordHash = await bcrypt.hash(password, 12)

                        if(!email_verified) return res.status(400).json({msg: "Email verification failed."})

                        const user = await Users.findOne({email})

                        if(user){
                            const isMatch = await bcrypt.compare(password, user.password)
                            if(!isMatch) return res.status(400).json({msg: "Password is incorrect."})

                            const refresh_token = createRefreshToken({id: user._id})
                            res.cookie('refreshtoken', refresh_token, {
                                httpOnly: true,
                                path: '/user/refresh_token',
                                maxAge: 7*24*60*60*1000 // 7 days
                            })

                            res.json({msg: "Login success!"})
                        }else{
                            const newUser = new Users({
                                name, email, password: passwordHash, avatar: picture
                            })

                            await newUser.save()
                            
                            const refresh_token = createRefreshToken({id: newUser._id})
                            res.cookie('refreshtoken', refresh_token, {
                                httpOnly: true,
                                path: '/user/refresh_token',
                                maxAge: 7*24*60*60*1000 // 7 days
                            })

                            res.json({msg: "Login success!"})
                        }


                    } catch (err) {
                        return res.status(500).json({msg: err.message})
                    }
                },
                facebookLogin: async (req, res) => {
                    try {
                        const {accessToken, userID} = req.body

                        const URL = `https://graph.facebook.com/v2.9/${userID}/?fields=id,name,email,picture&access_token=${accessToken}`
                        
                        const data = await fetch(URL).then(res => res.json()).then(res => {return res})

                        const {email, name, picture} = data

                        const password = email + process.env.FACEBOOK_SECRET

                        const passwordHash = await bcrypt.hash(password, 12)

                        const user = await Users.findOne({email})

                        if(user){
                            const isMatch = await bcrypt.compare(password, user.password)
                            if(!isMatch) return res.status(400).json({msg: "Password is incorrect."})

                            const refresh_token = createRefreshToken({id: user._id})
                            res.cookie('refreshtoken', refresh_token, {
                                httpOnly: true,
                                path: '/user/refresh_token',
                                maxAge: 7*24*60*60*1000 // 7 days
                            })

                            res.json({msg: "Login success!"})
                        }else{
                            const newUser = new Users({
                                name, email, password: passwordHash, avatar: picture.data.url
                            })

                            await newUser.save()
                            
                            const refresh_token = createRefreshToken({id: newUser._id})
                            res.cookie('refreshtoken', refresh_token, {
                                httpOnly: true,
                                path: '/user/refresh_token',
                                maxAge: 7*24*60*60*1000 // 7 days
                            })

                            res.json({msg: "Login success!"})
                        }


                    } catch (err) {
                        return res.status(500).json({msg: err.message})
                    }
                }
            }





            function validateEmail(email) {
                const re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                return re.test(email);
            }

            const createActivationToken = (payload) => {
                return jwt.sign(payload, process.env.ACTIVATION_TOKEN_SECRET, {expiresIn: '5m'})
            }

            const createAccessToken = (payload) => {
                return jwt.sign(payload, process.env.ACCESS_TOKEN_SECRET, {expiresIn: '15m'})
            }

            const createRefreshToken = (payload) => {
                return jwt.sign(payload, process.env.REFRESH_TOKEN_SECRET, {expiresIn: '7d'})
            }

            module.exports = userCtrl

}

{uploadController
        const cloudinary = require('cloudinary')
        const fs = require('fs')

        cloudinary.config({
            cloud_name: process.env.CLOUD_NAME,
            api_key: process.env.CLOUD_API_KEY,
            api_secret: process.env.CLOUD_API_SECRET
        })



        const uploadCtrl = {
            uploadAvatar: (req, res) => {
                try {
                    const file = req.files.file;
                    
                    cloudinary.v2.uploader.upload(file.tempFilePath, {
                        folder: 'avatar', width: 150, height: 150, crop: "fill"
                    }, async(err, result) => {
                        if(err) throw err;

                        removeTmp(file.tempFilePath)

                        res.json({url: result.secure_url})
                    })
                
                } catch (err) {
                    return res.status(500).json({msg: err.message})
                }
            }

        }


        const removeTmp = (path) => {
            fs.unlink(path, err => {
                if(err) throw err
            })
        }

        module.exports = uploadCtrl

}

{sendMail
        const nodemailer = require('nodemailer')
        const {google} = require('googleapis')
        const {OAuth2} = google.auth;
        const OAUTH_PLAYGROUND = 'https://developers.google.com/oauthplayground'

        const {
            MAILING_SERVICE_CLIENT_ID,
            MAILING_SERVICE_CLIENT_SECRET,
            MAILING_SERVICE_REFRESH_TOKEN,
            SENDER_EMAIL_ADDRESS
        } = process.env

        const oauth2Client = new OAuth2(
            MAILING_SERVICE_CLIENT_ID,
            MAILING_SERVICE_CLIENT_SECRET,
            MAILING_SERVICE_REFRESH_TOKEN,
            OAUTH_PLAYGROUND
        )

        // send mail
        const sendEmail = (to, url, txt) => {
            oauth2Client.setCredentials({
                refresh_token: MAILING_SERVICE_REFRESH_TOKEN
            })

            const accessToken = oauth2Client.getAccessToken()
            const smtpTransport = nodemailer.createTransport({
                service: 'gmail',
                auth: {
                    type: 'OAuth2',
                    user: SENDER_EMAIL_ADDRESS,
                    clientId: MAILING_SERVICE_CLIENT_ID,
                    clientSecret: MAILING_SERVICE_CLIENT_SECRET,
                    refreshToken: MAILING_SERVICE_REFRESH_TOKEN,
                    accessToken
                }
            })

            const mailOptions = {
                from: SENDER_EMAIL_ADDRESS,
                to: to,
                subject: "DevAT Channel",
                html: `
                    <div style="max-width: 700px; margin:auto; border: 10px solid #ddd; padding: 50px 20px; font-size: 110%;">
                    <h2 style="text-align: center; text-transform: uppercase;color: teal;">Welcome to the DevAT channel.</h2>
                    <p>Congratulations! You're almost set to start using DEVAT✮SHOP.
                        Just click the button below to validate your email address.
                    </p>
                    
                    <a href=${url} style="background: crimson; text-decoration: none; color: white; padding: 10px 20px; margin: 10px 0; display: inline-block;">${txt}</a>
                
                    <p>If the button doesn't work for any reason, you can also click on the link below:</p>
                
                    <div>${url}</div>
                    </div>
                `
            }

            smtpTransport.sendMail(mailOptions, (err, infor) => {
                if(err) return err;
                return infor
            })
        }

        module.exports = sendEmail

}
















































 bcrypt cloudinary concurrently cookie-parser cors dotenv express-fileupload fs googleapis jsonwebtoken mongoose multer node-fetch nodemailer nodemon path
   